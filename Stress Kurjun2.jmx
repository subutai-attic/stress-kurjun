<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">cdn.subut.ai</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">8338</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="signedAuthId" elementType="Argument">
            <stringProp name="Argument.name">signedAuthId</stringProp>
            <stringProp name="Argument.value">-----BEGIN PGP SIGNED MESSAGE----- Hash: SHA256  45c363b7-d366-4e2a-80d6-8c445a74802c -----BEGIN PGP SIGNATURE----- Version: Subutai Social v2.0.6 Comment: https://subutai.io/  wsFcBAEBCAAQBQJXEJKMCRADImBVs5i02gAAHmIQALps5FZ0U4hje0q2jlLO gp41leFbAK/Kc8sax+JSNY5hMXJTtBeHGWMSP9xXGaIkcipK6nsVAZlNoVQE vMXCSdgqzqgt8pJGggtuOTzhWi00vsyFNXXOHqqJOC4fxQLif/p+NrRAM/tn PqbaqmV3oL1OLEfAcwPvbZ2g1dDtND7JsYYc1P57vTIstmsksOodcHuLo7en E+7qy239zsz20uEJ6nDoP4gt7NB02oWim4KQ05gHT7rGoEusd840E8yxrnAS xfXAq0bDQN0wr0A6CxLM5D3vzxKKTSSHkFvXKnZK+ktPDOrdO1CoijBE55GN N3qBXvtM5aRGX+Lp3EzRvGwU+A3bsdn6PHcGnz9SBpKlMD3zRXE2pRdFSnns QcK9yDyknBRyJDOuziSHytmYJfDo9751M20PwGXCi3xepjsKBuK+TEqWnqxH 4dc3udlRDzTMJo+PB5Tszw5tyoLTfBUqOUYsKu+kESRqMWrYczbveihaFQvx N4t0TvxDkEYIJ9zf2xVNWC7WHQ5jhuNUoSyUUCZg54JSfr79vC1KBqeUZh/u y4/hdV9i7Molhi1mr/ToyLtijPen0FRcENzAtH5uqvkGyEohiqfbjlp7c5jF jVf202C9imE8H8yPnD5EToyRZv0uEEUdSUrCJEcPOhCgOYREaNhN6nX0T0Xz r667 =JUyt -----END PGP SIGNATURE----- </stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="fingerprint" elementType="Argument">
            <stringProp name="Argument.name">fingerprint</stringProp>
            <stringProp name="Argument.value">fa4e7c3bc9d435613d62c27c03226055b398b4da</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pubkey" elementType="Argument">
            <stringProp name="Argument.name">pubkey</stringProp>
            <stringProp name="Argument.value">-----BEGIN PGP PUBLIC KEY BLOCK----- Version: GnuPG v1  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 =/lJP -----END PGP PUBLIC KEY BLOCK----- </stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="privatekey" elementType="Argument">
            <stringProp name="Argument.name">privatekey</stringProp>
            <stringProp name="Argument.value">-----BEGIN PGP PRIVATE KEY BLOCK----- Version: GnuPG v1  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 Z5+JjRDH+Kg3vp/zk5snk8bEbRLN6g== =q17s -----END PGP PRIVATE KEY BLOCK----- </stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Number of users" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1460649185000</longProp>
        <longProp name="ThreadGroup.end_time">1460649185000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request Template" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="key" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${publicKey}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">key</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/kurjun/rest/identity/user/add</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Authenticate" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="fingerprint" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">fingerprint</stringProp>
                <stringProp name="Argument.value">FA4E7C3BC9D435613D62C27C03226055B398B4DA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="message" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">message</stringProp>
                <stringProp name="Argument.value">-----BEGIN PGP SIGNED MESSAGE-----&#xd;
Hash: SHA256&#xd;
&#xd;
750c8955-6b42-4263-b57f-58ba3e8a844c&#xd;
-----BEGIN PGP SIGNATURE-----&#xd;
Version: Subutai Social v2.0.6&#xd;
Comment: ${protocol}s://subutai.io/&#xd;
&#xd;
wsFcBAEBCAAQBQJXEJ5eCRADImBVs5i02gAAiPgP/33dHmpWGuiw/9dAxDIP&#xd;
Kx+7EVSg60KIwGxA9aydcHCgVPQ28KrwzKW7lA3CNaaklUInDYpjItriaFv5&#xd;
fSOj/buoM52kVRzBCOtiE6amhxLQMosqR2ObfE4W5p/54YwQ8y+nlUXzhso9&#xd;
sncs6inJq7z7pEQ/nOhm7zzYJLw3lkVFiFylTuTsl/8m/9QZpEC54fqVfNOD&#xd;
uVJKfeaRdAYQTDmImJJkBg1yI73IQiPSTyykSrN9IP/IhtgjP3HwH7nZgMrD&#xd;
HUy9F+/tcOg+bIRZvUiD3WR6K8nO7B6MmkqZCdHFP0urVVxuAN5VxlEOULj6&#xd;
ic2Cf8oLNEutp2gPa03VaRdLrkyfQiBACrMMWotJ6hU8kbnajKFvcugAeuE/&#xd;
DZoJneitMindVAAsRa+ZRin7YOglKivtYxOUWWSKnjPSiqw1NYLKN3hfw/eZ&#xd;
VpEgIJ80tF2DEyq/T7u3VJLc+8pgLbAvraiMmK/a3v2ODg++oCqzTjjiYGx8&#xd;
DS4gOsWGEhmzIVHQ9NpEFVVWn5yr1/X0t7Dnrbq2QeLgOM75XTY+cTss/2CP&#xd;
iWe559hQalIQzBfQ1T7LWLalch5qrXrvLsekyzITetpsn8saBDOVgic3Vhu+&#xd;
sLKqhtQneZBbhoWP/hk28wLioQsxxMf0U8wgcTHJbUs0ursIoAmyWOfRreAj&#xd;
EqER&#xd;
=UHwt&#xd;
-----END PGP SIGNATURE-----</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/kurjun/login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">${protocol}://${host}:${port}/kurjun/login</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/kurjun/login</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Register Public Key" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="key" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${pubkey}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">key</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/kurjun/rest/identity/user/add</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import com.sample.security.tool.PGPKeyUtil;
import org.bouncycastle.openpgp.PGPPublicKey;

PGPPublicKey pubKey = PGPKeyUtil.readPublicKey( vars.get(&quot;pubkey&quot;) );

print(&quot;huurah&quot;);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Authorize" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="fingerprint" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${fingerprint}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">fingerprint</stringProp>
              </elementProp>
              <elementProp name="message" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${signedAuthId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">message</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/kurjun/rest/identity/user/auth</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Download template" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">id</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/kurjun/rest/template/get</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get user list" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/kurjun/rest/identity/user/list</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload template" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="repository" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">public</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">repository</stringProp>
              </elementProp>
              <elementProp name="file" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${file}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">file</stringProp>
              </elementProp>
              <elementProp name="md5" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${__MD5(${file})}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">md5</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">kurjun/rest/template/upload</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.RandomStringUtils;
import org.apache.commons.lang3.RandomUtils;

// Create a temp file
File myFile = File.createTempFile(&quot;upload-&quot;, &quot;&quot; );
// Generate Random length string and write to file
FileUtils.writeStringToFile(myFile, RandomStringUtils.random( RandomUtils.nextInt( 1000, 100000 ) ), &quot;UTF-8&quot; );
// Store file name in variable.
vars.put( &quot;file&quot;, myFile.getCanonicalPath() );

log.info(&quot;File generated&quot;);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.commons.io.FileUtils;
// Delete file and do not throw error
FileUtils.deleteQuietly(new File( vars.get(&quot;file&quot;)));</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="false"/>
        <hashTree/>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="Recording Controller" enabled="false"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Users Downloading all templates" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1460649185000</longProp>
        <longProp name="ThreadGroup.end_time">1460649185000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get List of templates" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/kurjun/rest/template/list</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Serialize JSON to Array" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import com.eclipsesource.json.*;
import org.apache.jmeter.services.FileServer;

FileServer fs = FileServer.getFileServer(); //instantiate FileServer class 
log.info(fs.getBaseDir()); // get FileServer base dir and write it to jmeter.log

String jsonString = prev.getResponseDataAsString();
JsonArray array = JsonArray.readFrom(jsonString);
JsonArray tmp = new JsonArray();
for (int i = 0; i &lt; array.values().size(); i++) {
	JsonValue jsonValue = array.values().get(i);
	JsonObject obj = jsonValue.asObject();
	JsonObject tmpObj = new JsonObject();
	tmpObj.set(&quot;id&quot;, obj.get(&quot;id&quot;));
	tmp.add(tmpObj);
}
bsh.shared.templates = tmp;
bsh.shared.templateIndex = 0;
vars.put(&quot;templates_count&quot;, String.valueOf(tmp.values().size()));</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Download Templates" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${templates_count}</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Download Template" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${template_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/kurjun/rest/template/get</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Increment template index" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.eclipsesource.json.*;

log.info(&quot;Incrementing index&quot;);

JsonArray templates = bsh.shared.templates;

int templateInx = bsh.shared.templateIndex;
JsonValue value = templates.values().get(templateInx);
JsonObject obj = value.asObject();

String templateId = obj.get(&quot;id&quot;).asString();
log.warn(templateId);
vars.put(&quot;template_id&quot;, &quot;qwer&quot;);

templateInx++;
bsh.shared.templateIndex = templateInx;

</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename"></stringProp>
              <boolProp name="FileSaver.errorsonly">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.addTimstamp">true</boolProp>
            </ResultSaver>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Users Downloading all deb files" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1460649185000</longProp>
        <longProp name="ThreadGroup.end_time">1460649185000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get List of deb files" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/kurjun/rest/deb/list</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Serialize JSON to Array" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import com.eclipsesource.json.*;
import org.apache.jmeter.services.FileServer;

FileServer fs = FileServer.getFileServer(); //instantiate FileServer class 
log.info(fs.getBaseDir()); // get FileServer base dir and write it to jmeter.log

String jsonString = prev.getResponseDataAsString();
JsonArray array = JsonArray.readFrom(jsonString);
JsonArray tmp = new JsonArray();
for (int i = 0; i &lt; array.values().size(); i++) {
	JsonValue jsonValue = array.values().get(i);
	JsonObject obj = jsonValue.asObject();
	JsonObject tmpObj = new JsonObject();
	tmpObj.set(&quot;id&quot;, obj.get(&quot;md5Sum&quot;));
	tmp.add(tmpObj);
}
bsh.shared.templates = tmp;
bsh.shared.templateIndex = 0;
vars.put(&quot;templates_count&quot;, String.valueOf(tmp.values().size()));
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Download Deb files" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${templates_count}</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Download deb" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="md5" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${template_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">md5</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/kurjun/rest/deb/get</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Increment template index" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.eclipsesource.json.*;

log.info(&quot;Incrementing index&quot;);

JsonArray templates = bsh.shared.templates;

int templateInx = bsh.shared.templateIndex;
JsonValue value = templates.values().get(templateInx);
JsonObject obj = value.asObject();

String templateId = obj.get(&quot;id&quot;).asString();
log.warn(templateId);
vars.put(&quot;template_id&quot;, &quot;qwer&quot;);

templateInx++;
bsh.shared.templateIndex = templateInx;



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename"></stringProp>
              <boolProp name="FileSaver.errorsonly">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.addTimstamp">true</boolProp>
            </ResultSaver>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Users Downloading all raw files" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1460649185000</longProp>
        <longProp name="ThreadGroup.end_time">1460649185000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get List of raw files" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/kurjun/rest/file/list</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Serialize JSON to Array" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import com.eclipsesource.json.*;
import org.apache.jmeter.services.FileServer;

FileServer fs = FileServer.getFileServer(); //instantiate FileServer class 
log.info(fs.getBaseDir()); // get FileServer base dir and write it to jmeter.log

String jsonString = prev.getResponseDataAsString();
JsonArray array = JsonArray.readFrom(jsonString);
JsonArray tmp = new JsonArray();
for (int i = 0; i &lt; array.values().size(); i++) {
	JsonValue jsonValue = array.values().get(i);
	JsonObject obj = jsonValue.asObject();
	JsonObject tmpObj = new JsonObject();
	tmpObj.set(&quot;id&quot;, obj.get(&quot;id&quot;));
	tmp.add(tmpObj);
}
bsh.shared.templates = tmp;
bsh.shared.templateIndex = 0;
vars.put(&quot;templates_count&quot;, String.valueOf(tmp.values().size()));
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Download Raw files" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${templates_count}</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Download Raw file" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="md5" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${template_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">md5</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/kurjun/rest/deb/get</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Increment template index" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.eclipsesource.json.*;

log.info(&quot;Incrementing index&quot;);

JsonArray templates = bsh.shared.templates;

int templateInx = bsh.shared.templateIndex;
JsonValue value = templates.values().get(templateInx);
JsonObject obj = value.asObject();

String templateId = obj.get(&quot;id&quot;).asString();
log.warn(templateId);
vars.put(&quot;template_id&quot;, &quot;qwer&quot;);

templateInx++;
bsh.shared.templateIndex = templateInx;



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename"></stringProp>
              <boolProp name="FileSaver.errorsonly">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.addTimstamp">true</boolProp>
            </ResultSaver>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="DistributionGraphVisualizer" testclass="ResultCollector" testname="Distribution Graph (alpha)" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <Summariser guiclass="SummariserGui" testclass="Summariser" testname="Generate Summary Results" enabled="true"/>
      <hashTree/>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Test Fragment" enabled="false"/>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
